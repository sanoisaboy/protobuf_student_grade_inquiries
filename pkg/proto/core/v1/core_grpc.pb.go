// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: core/v1/core.proto

package corev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentserviceClient is the client API for Studentservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentserviceClient interface {
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error)
	ListStudent(ctx context.Context, in *ListStudentRequest, opts ...grpc.CallOption) (*ListStudentResponse, error)
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentResquest, opts ...grpc.CallOption) (*UpdateStudentResponse, error)
	DeleteStudent(ctx context.Context, in *DeleteStudentResquest, opts ...grpc.CallOption) (*DeleteStudentResponse, error)
}

type studentserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentserviceClient(cc grpc.ClientConnInterface) StudentserviceClient {
	return &studentserviceClient{cc}
}

func (c *studentserviceClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error) {
	out := new(GetStudentResponse)
	err := c.cc.Invoke(ctx, "/core.v1.Studentservice/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentserviceClient) ListStudent(ctx context.Context, in *ListStudentRequest, opts ...grpc.CallOption) (*ListStudentResponse, error) {
	out := new(ListStudentResponse)
	err := c.cc.Invoke(ctx, "/core.v1.Studentservice/ListStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentserviceClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error) {
	out := new(CreateStudentResponse)
	err := c.cc.Invoke(ctx, "/core.v1.Studentservice/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentserviceClient) UpdateStudent(ctx context.Context, in *UpdateStudentResquest, opts ...grpc.CallOption) (*UpdateStudentResponse, error) {
	out := new(UpdateStudentResponse)
	err := c.cc.Invoke(ctx, "/core.v1.Studentservice/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentserviceClient) DeleteStudent(ctx context.Context, in *DeleteStudentResquest, opts ...grpc.CallOption) (*DeleteStudentResponse, error) {
	out := new(DeleteStudentResponse)
	err := c.cc.Invoke(ctx, "/core.v1.Studentservice/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentserviceServer is the server API for Studentservice service.
// All implementations must embed UnimplementedStudentserviceServer
// for forward compatibility
type StudentserviceServer interface {
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error)
	ListStudent(context.Context, *ListStudentRequest) (*ListStudentResponse, error)
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error)
	UpdateStudent(context.Context, *UpdateStudentResquest) (*UpdateStudentResponse, error)
	DeleteStudent(context.Context, *DeleteStudentResquest) (*DeleteStudentResponse, error)
	mustEmbedUnimplementedStudentserviceServer()
}

// UnimplementedStudentserviceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentserviceServer struct {
}

func (UnimplementedStudentserviceServer) GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedStudentserviceServer) ListStudent(context.Context, *ListStudentRequest) (*ListStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudent not implemented")
}
func (UnimplementedStudentserviceServer) CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedStudentserviceServer) UpdateStudent(context.Context, *UpdateStudentResquest) (*UpdateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedStudentserviceServer) DeleteStudent(context.Context, *DeleteStudentResquest) (*DeleteStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedStudentserviceServer) mustEmbedUnimplementedStudentserviceServer() {}

// UnsafeStudentserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentserviceServer will
// result in compilation errors.
type UnsafeStudentserviceServer interface {
	mustEmbedUnimplementedStudentserviceServer()
}

func RegisterStudentserviceServer(s grpc.ServiceRegistrar, srv StudentserviceServer) {
	s.RegisterService(&Studentservice_ServiceDesc, srv)
}

func _Studentservice_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentserviceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.v1.Studentservice/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentserviceServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentservice_ListStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentserviceServer).ListStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.v1.Studentservice/ListStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentserviceServer).ListStudent(ctx, req.(*ListStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentservice_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentserviceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.v1.Studentservice/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentserviceServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentservice_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentserviceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.v1.Studentservice/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentserviceServer).UpdateStudent(ctx, req.(*UpdateStudentResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentservice_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentserviceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.v1.Studentservice/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentserviceServer).DeleteStudent(ctx, req.(*DeleteStudentResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// Studentservice_ServiceDesc is the grpc.ServiceDesc for Studentservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Studentservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.v1.Studentservice",
	HandlerType: (*StudentserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudent",
			Handler:    _Studentservice_GetStudent_Handler,
		},
		{
			MethodName: "ListStudent",
			Handler:    _Studentservice_ListStudent_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _Studentservice_CreateStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _Studentservice_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _Studentservice_DeleteStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/v1/core.proto",
}
