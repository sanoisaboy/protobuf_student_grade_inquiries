// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/v1/core.proto

package corev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStudentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStudentRequestMultiError, or nil if none found.
func (m *ListStudentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStudentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListStudentRequestMultiError(errors)
	}

	return nil
}

// ListStudentRequestMultiError is an error wrapping multiple validation errors
// returned by ListStudentRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStudentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStudentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStudentRequestMultiError) AllErrors() []error { return m }

// ListStudentRequestValidationError is the validation error returned by
// ListStudentRequest.Validate if the designated constraints aren't met.
type ListStudentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStudentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStudentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStudentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStudentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStudentRequestValidationError) ErrorName() string {
	return "ListStudentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStudentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStudentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStudentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStudentRequestValidationError{}

// Validate checks the field values on ListStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStudentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStudentResponseMultiError, or nil if none found.
func (m *ListStudentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStudentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStudentResponseValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStudentResponseValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStudentResponseValidationError{
					field:  fmt.Sprintf("User[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Point

	if len(errors) > 0 {
		return ListStudentResponseMultiError(errors)
	}

	return nil
}

// ListStudentResponseMultiError is an error wrapping multiple validation
// errors returned by ListStudentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStudentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStudentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStudentResponseMultiError) AllErrors() []error { return m }

// ListStudentResponseValidationError is the validation error returned by
// ListStudentResponse.Validate if the designated constraints aren't met.
type ListStudentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStudentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStudentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStudentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStudentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStudentResponseValidationError) ErrorName() string {
	return "ListStudentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStudentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStudentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStudentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStudentResponseValidationError{}

// Validate checks the field values on GetStudentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStudentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentRequestMultiError, or nil if none found.
func (m *GetStudentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Point

	if len(errors) > 0 {
		return GetStudentRequestMultiError(errors)
	}

	return nil
}

// GetStudentRequestMultiError is an error wrapping multiple validation errors
// returned by GetStudentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStudentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentRequestMultiError) AllErrors() []error { return m }

// GetStudentRequestValidationError is the validation error returned by
// GetStudentRequest.Validate if the designated constraints aren't met.
type GetStudentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentRequestValidationError) ErrorName() string {
	return "GetStudentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentRequestValidationError{}

// Validate checks the field values on GetStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStudentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentResponseMultiError, or nil if none found.
func (m *GetStudentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Point

	// no validation rules for Success

	if len(errors) > 0 {
		return GetStudentResponseMultiError(errors)
	}

	return nil
}

// GetStudentResponseMultiError is an error wrapping multiple validation errors
// returned by GetStudentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStudentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentResponseMultiError) AllErrors() []error { return m }

// GetStudentResponseValidationError is the validation error returned by
// GetStudentResponse.Validate if the designated constraints aren't met.
type GetStudentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentResponseValidationError) ErrorName() string {
	return "GetStudentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentResponseValidationError{}

// Validate checks the field values on CreateStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStudentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStudentRequestMultiError, or nil if none found.
func (m *CreateStudentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStudentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStudentRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStudentRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStudentRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Point

	if len(errors) > 0 {
		return CreateStudentRequestMultiError(errors)
	}

	return nil
}

// CreateStudentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStudentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStudentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStudentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStudentRequestMultiError) AllErrors() []error { return m }

// CreateStudentRequestValidationError is the validation error returned by
// CreateStudentRequest.Validate if the designated constraints aren't met.
type CreateStudentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStudentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStudentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStudentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStudentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStudentRequestValidationError) ErrorName() string {
	return "CreateStudentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStudentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStudentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStudentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStudentRequestValidationError{}

// Validate checks the field values on CreateStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStudentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStudentResponseMultiError, or nil if none found.
func (m *CreateStudentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStudentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Point

	if len(errors) > 0 {
		return CreateStudentResponseMultiError(errors)
	}

	return nil
}

// CreateStudentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStudentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStudentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStudentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStudentResponseMultiError) AllErrors() []error { return m }

// CreateStudentResponseValidationError is the validation error returned by
// CreateStudentResponse.Validate if the designated constraints aren't met.
type CreateStudentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStudentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStudentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStudentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStudentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStudentResponseValidationError) ErrorName() string {
	return "CreateStudentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStudentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStudentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStudentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStudentResponseValidationError{}

// Validate checks the field values on UpdateStudentResquest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStudentResquest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStudentResquest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStudentResquestMultiError, or nil if none found.
func (m *UpdateStudentResquest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudentResquest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStudentResquestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStudentResquestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStudentResquestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Point

	if len(errors) > 0 {
		return UpdateStudentResquestMultiError(errors)
	}

	return nil
}

// UpdateStudentResquestMultiError is an error wrapping multiple validation
// errors returned by UpdateStudentResquest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudentResquestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudentResquestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudentResquestMultiError) AllErrors() []error { return m }

// UpdateStudentResquestValidationError is the validation error returned by
// UpdateStudentResquest.Validate if the designated constraints aren't met.
type UpdateStudentResquestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudentResquestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudentResquestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudentResquestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudentResquestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudentResquestValidationError) ErrorName() string {
	return "UpdateStudentResquestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudentResquestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudentResquest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudentResquestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudentResquestValidationError{}

// Validate checks the field values on UpdateStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStudentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStudentResponseMultiError, or nil if none found.
func (m *UpdateStudentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Updatesuccess

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Point

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStudentResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStudentResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStudentResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStudentResponseMultiError(errors)
	}

	return nil
}

// UpdateStudentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStudentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudentResponseMultiError) AllErrors() []error { return m }

// UpdateStudentResponseValidationError is the validation error returned by
// UpdateStudentResponse.Validate if the designated constraints aren't met.
type UpdateStudentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudentResponseValidationError) ErrorName() string {
	return "UpdateStudentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudentResponseValidationError{}

// Validate checks the field values on DeleteStudentResquest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStudentResquest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStudentResquest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStudentResquestMultiError, or nil if none found.
func (m *DeleteStudentResquest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStudentResquest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Point

	if len(errors) > 0 {
		return DeleteStudentResquestMultiError(errors)
	}

	return nil
}

// DeleteStudentResquestMultiError is an error wrapping multiple validation
// errors returned by DeleteStudentResquest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStudentResquestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStudentResquestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStudentResquestMultiError) AllErrors() []error { return m }

// DeleteStudentResquestValidationError is the validation error returned by
// DeleteStudentResquest.Validate if the designated constraints aren't met.
type DeleteStudentResquestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStudentResquestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStudentResquestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStudentResquestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStudentResquestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStudentResquestValidationError) ErrorName() string {
	return "DeleteStudentResquestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStudentResquestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStudentResquest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStudentResquestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStudentResquestValidationError{}

// Validate checks the field values on DeleteStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStudentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStudentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStudentResponseMultiError, or nil if none found.
func (m *DeleteStudentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStudentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deletesuccess

	if len(errors) > 0 {
		return DeleteStudentResponseMultiError(errors)
	}

	return nil
}

// DeleteStudentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStudentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteStudentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStudentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStudentResponseMultiError) AllErrors() []error { return m }

// DeleteStudentResponseValidationError is the validation error returned by
// DeleteStudentResponse.Validate if the designated constraints aren't met.
type DeleteStudentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStudentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStudentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStudentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStudentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStudentResponseValidationError) ErrorName() string {
	return "DeleteStudentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStudentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStudentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStudentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStudentResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentName

	// no validation rules for ID

	// no validation rules for POINT

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Messages with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Messages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Messages with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessagesMultiError, or nil
// if none found.
func (m *Messages) ValidateAll() error {
	return m.validate(true)
}

func (m *Messages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if len(errors) > 0 {
		return MessagesMultiError(errors)
	}

	return nil
}

// MessagesMultiError is an error wrapping multiple validation errors returned
// by Messages.ValidateAll() if the designated constraints aren't met.
type MessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessagesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessagesMultiError) AllErrors() []error { return m }

// MessagesValidationError is the validation error returned by
// Messages.Validate if the designated constraints aren't met.
type MessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessagesValidationError) ErrorName() string { return "MessagesValidationError" }

// Error satisfies the builtin error interface
func (e MessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessagesValidationError{}

// Validate checks the field values on Ids with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ids with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdsMultiError, or nil if none found.
func (m *Ids) ValidateAll() error {
	return m.validate(true)
}

func (m *Ids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if len(errors) > 0 {
		return IdsMultiError(errors)
	}

	return nil
}

// IdsMultiError is an error wrapping multiple validation errors returned by
// Ids.ValidateAll() if the designated constraints aren't met.
type IdsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsMultiError) AllErrors() []error { return m }

// IdsValidationError is the validation error returned by Ids.Validate if the
// designated constraints aren't met.
type IdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsValidationError) ErrorName() string { return "IdsValidationError" }

// Error satisfies the builtin error interface
func (e IdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsValidationError{}
